# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import seaborn as sns

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
    

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

train_data = pd.read_csv("/kaggle/input/titanic/train.csv")

median_ages_train = train_data.groupby(['Sex', 'Pclass'])['Age'].median()
train_data.fillna(0, inplace=True)

train_data.loc[train_data.Age == 0, 'Age'] = train_data[train_data.Age == 0].apply(lambda row: median_ages_train[row['Sex'], row['Pclass']], axis=1)

train_data.describe()

test_data = pd.read_csv("/kaggle/input/titanic/test.csv")

median_ages_test = test_data.groupby(['Sex', 'Pclass'])['Age'].median()
test_data.fillna(0, inplace=True)

test_data.loc[test_data.Age == 0, 'Age'] = test_data[test_data.Age == 0].apply(lambda row: median_ages_test[row['Sex'], row['Pclass']], axis=1)

test_data.describe()

# Add the 'age_old' column to both 'train_data' and 'test_data' DataFrames
train_data['age_old'] = np.where(train_data['Age'] > 70, 1, 0)
test_data['age_old'] = np.where(test_data['Age'] > 70, 1, 0)

# Set the 'Survived' column to 0 for passengers where 'age_old' is 1 in the 'train_data' DataFrame
train_data.loc[train_data['age_old'] == 1, 'Survived'] = 0

women = train_data.loc[train_data.Sex == 'female']["Survived"]
rate_women = sum(women)/len(women)

print("% of women who survived:", rate_women)

# Filter the 'train_data' DataFrame where 'Age' is less than 16
age_less_than_16 = train_data[train_data['Age'] < 16]

# From 'age_less_than_16', filter the rows where 'Survived' is 1
survived_age_less_than_16 = age_less_than_16[age_less_than_16['Survived'] == 1]

# Calculate the percentage of survival
percentage_survival = (len(survived_age_less_than_16) / len(age_less_than_16)) * 100

# Print the calculated percentage
print("Percentage of passengers under 16 who survived: ", percentage_survival)

survived_age_less_than_16.head()

men = train_data.loc[train_data.Sex == 'male']["Survived"]
rate_men = sum(men)/len(men)

print("% of men who survived:", rate_men)

from sklearn.ensemble import RandomForestClassifier

y = train_data["Survived"]

# Create a new column 'is_minor' in both 'train_data' and 'test_data' DataFrames
train_data['is_minor'] = np.where(train_data['Age'] < 16, 1, 0)
test_data['is_minor'] = np.where(test_data['Age'] < 16, 1, 0)

# Add 'age_old' to the features array
features = ["Sex", "Pclass", "Fare", "is_minor", "Parch", "age_old"]

X_train = pd.get_dummies(train_data[features])
X_test = pd.get_dummies(test_data[features])

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.fit_transform(X_test)

# Apply PCA
pca = PCA(n_components=6)
principalComponents = pca.fit_transform(X_train_scaled)
X_train_scaled_pca = pca.transform(X_train_scaled)
X_test_scaled_pca = pca.transform(X_test_scaled)

model = RandomForestClassifier(n_estimators=200, max_depth=30, random_state=1)
model.fit(X_train_scaled_pca, y)
predictions = model.predict(X_test_scaled_pca)

print(round(model.score(X_train_scaled_pca, y), 5))

output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})
output.to_csv('submission.csv', index=False)

print("Your submission was successfully saved!")