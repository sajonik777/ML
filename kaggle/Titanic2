# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import seaborn as sns

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
    

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session


train_data = pd.read_csv("/kaggle/input/titanic/train.csv")

median_ages_train = train_data.groupby(['Sex', 'Pclass'])['Age'].median()
train_data.fillna(0, inplace=True)

train_data.loc[train_data.Age == 0, 'Age'] = train_data[train_data.Age == 0].apply(lambda row: median_ages_train[row['Sex'], row['Pclass']], axis=1)

train_data.describe()


test_data = pd.read_csv("/kaggle/input/titanic/test.csv")

median_ages_test = test_data.groupby(['Sex', 'Pclass'])['Age'].median()
test_data.fillna(0, inplace=True)

test_data.loc[test_data.Age == 0, 'Age'] = test_data[test_data.Age == 0].apply(lambda row: median_ages_test[row['Sex'], row['Pclass']], axis=1)

test_data.describe()


women = train_data.loc[train_data.Sex == 'female']["Survived"]
rate_women = sum(women)/len(women)

print("% of women who survived:", rate_women)



men = train_data.loc[train_data.Sex == 'male']["Survived"]
rate_men = sum(men)/len(men)

print("% of men who survived:", rate_men)


from sklearn.ensemble import RandomForestClassifier

y = train_data["Survived"]

features = ["Pclass", "Sex", "Age", "SibSp", "Parch", "Fare"]
X_train = pd.get_dummies(train_data[features])
X_test = pd.get_dummies(test_data[features])

model = RandomForestClassifier(n_estimators=100, max_depth=20, random_state=1)
model.fit(X_train, y)
predictions = model.predict(X_test)

print(round(model.score(X, y), 5))
# output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})
# output.to_csv('submission.csv', index=False)

print("Your submission was successfully saved!")


# Extract feature importances
importances = model.feature_importances_
feature_importances = pd.DataFrame({'feature': X_train.columns, 'importance': importances})
feature_importances = feature_importances.sort_values('importance', ascending=False)

# Plot feature importances
plt.figure(figsize=(8,6))
plt.bar(feature_importances['feature'], feature_importances['importance'])
plt.xlabel('Features')
plt.ylabel('Importance')
plt.title('Feature importances from RandomForestClassifier')
plt.show()


# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.fit_transform(X_test)


# Apply PCA
pca = PCA(n_components=7)
principalComponents = pca.fit_transform(X_train_scaled)

# Get the explained variance ratio
explained_variance_ratio = pca.explained_variance_ratio_

# Set seaborn style
sns.set(style='whitegrid')
 
# Plot the cumulative sum of the explained variance ratio
plt.plot(np.cumsum(explained_variance_ratio))
plt.xlabel('number of components')
plt.ylabel('cumulative explained variance')
 
# Add a vertical dashed red line at x=10
plt.axvline(linewidth=2, color='r', linestyle = '--', x=4, ymin=0, ymax=1)
 
# Display the plot
plt.show()

# Creating a DataFrame that summarizes how much of the variance is explained by each principal component
evr = pca.explained_variance_ratio_
cvr = np.cumsum(pca.explained_variance_ratio_)
pca_df = pd.DataFrame()
pca_df['Cumulative Variance Ratio'] = cvr
pca_df['Explained Variance Ratio'] = evr

display(pca_df.head(5).round(3))


pca = PCA(n_components=4)
pca.fit(X_train_scaled)
X_train_scaled_pca = pca.transform(X_train_scaled)
X_test_scaled_pca = pca.transform(X_test_scaled)

# show weight for each component
pca_dims = []
for x in range(0, len(pca_df)):
    pca_dims.append('PCA Component {}'.format(x))
pca_df = pd.DataFrame(pca.components_, columns=labels, index=pca_dims)
pca_df.head(10).T
